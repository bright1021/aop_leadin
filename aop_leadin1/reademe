
交叉业务与主业务深度耦合在一起。当交叉业务逻辑
较多时，在主业务代码中会出现大量的交叉业务逻辑代码调用语句，大大影响了主业务逻辑
的可读性，降低了代码的可维护性，同时也增加了开发难度。


可以采用动态代理方式。在不修改主业务逻辑的前提下，扩展和增强其功能


对于 AOP 这种编程思想，很多框架都进行了实现。Spring 就是其中之一，可以完成面向
切面编程。然而，AspectJ 也实现了 AOP 的功能，且其实现方式更为简捷，使用更为方便，
而且还支持注解式开发。所以，Spring 又将 AspectJ 的对于 AOP 的实现也引入到了自己的框
架中。
在 Spring 中使用 AOP 开发时，一般使用 AspectJ 的实现方式。

AspectJ 中常用的通知有五种类型：
（1）前置通知
（2）后置通知
（3）环绕通知
（4）异常通知
（5）最终通知